/**
 * Read the LICENSE file for the licensing information.
 * Author: hansl@google.com (Hans Larsen)
 */

%{
  #include "pickle.hpp"

  #include <string>
  #include <sstream>

  #include "y.tab.h"
  #include "lexer.hpp"
%}

%{
  // String declaration.
  static std::ostringstream buffer;

  static void str_add(char c) {
    buffer << c;
  }
  static void str_reset() {
    buffer.clear();
  }
  static const char* str_get() {
    return buffer.str().c_str();
  }
%}

%{
  static void lex_error(const char* str, ...) {
    static char buffer[1024];
    va_list args;
    va_start(args, str);
    vsnprintf(buffer, sizeof(buffer) / sizeof(char), str, args);
    va_end(args);

    throw pickle::lexical_error(buffer);
  }

  static void newline() {
    lexical_stack::get()->new_line();
  }

%}

%x ST_STRING
%x ST_ML_STRING
%x ST_COMMENT

  /* Floats definitions */
dseq      ([[:digit:]]+)
dseq_opt  ([[:digit:]]*)
frac      (({dseq_opt}"."{dseq})|{dseq}".")
exp       ([eE][+-]?{dseq})
exp_opt   ({exp}?)
fsuff     [flFL]
fsuff_opt ({fsuff}?)
hpref     (0[xX])
hdseq     ([[:xdigit:]]+)
hdseq_opt ([[:xdigit:]]*)
hfrac     (({hdseq_opt}"."{hdseq})|({hdseq}"."))
bexp      ([pP][+-]?{dseq})
dfc       (({frac}{exp_opt}{fsuff_opt})|({dseq}{exp}{fsuff_opt}))
hfc       (({hpref}{hfrac}{bexp}{fsuff_opt})|({hpref}{hdseq}{bexp}{fsuff_opt}))

%%

  /* Comments */

#.*[\n]              { newline(); }

  /* Multiline comments */
"/*"                 { BEGIN(ST_COMMENT); }
<ST_COMMENT>"*/"     { BEGIN(0); }
<ST_COMMENT>[^*\n]+  { }
<ST_COMMENT>"*"[^/]  { }
<ST_COMMENT>\n       { newline(); }

  /* Multi-Line String Literals */
\"\"\"               { BEGIN(ST_ML_STRING); str_reset(); }
<ST_ML_STRING>\"\"\" { BEGIN(0); yylval.s = str_get(); return STRING; }
<ST_ML_STRING>\n     { str_add(*yytext); newline(); }
<ST_ML_STRING>.      { str_add(*yytext); }

  /* String Literals */
\"                  { BEGIN(ST_STRING); str_reset(); }
<ST_STRING>\\n      { str_add('\n'); }
<ST_STRING>\\t      { str_add('\t'); }
<ST_STRING>\\\"     { str_add('\"'); }
<ST_STRING>\"       { BEGIN(0); yylval.s = str_get(); return STRING; }
<ST_STRING>\n       { lex_error("String literals cannot contain new lines."); }
<ST_STRING>.        { str_add(*yytext); }

  /* Ignore whitespaces */
[ \t]+ ;
[\n]  { newline(); }

  /* INTEGERS */
([[:digit:]]{-}[0])[[:digit:]]* { yylval.i = strtol(yytext, NULL, 10);
                                  return INTEGER;
                                }
0[xX][[:xdigit:]]+              { yylval.i = strtol(yytext, NULL, 16);
                                  return INTEGER;
                                }
0[[:xdigit:]]+                  { yylval.i = strtol(yytext, NULL, 8);
                                  return INTEGER;
                                }

  /* FLOATS */
({dfc}|{hfc})                   { yylval.d = strtod(yytext, NULL);
                                  return DOUBLE;
                                }

  /* Keywords */
@import                         { return IMPORT; }
@namespace                      { return NAMESPACE; }
@experiment                     { return EXPERIMENT; }
@function                       { return FUNCTION; }
@const                          { return CONST; }
@param                          { return PARAM; }
@dictionary                     { return NAMESPACE; }
@variant                        { return VARIANT; }
@criteria                       { return CRITERIA; }

  /* Types and Constants */
@int                            { return TYPE_INTEGER; }
@string                         { return TYPE_STRING; }
@double                         { return TYPE_DOUBLE; }
@bool                           { return TYPE_BOOL; }
@true                           { return BOOL_TRUE; }
@false                          { return BOOL_FALSE; }

  /* Multi-character comparison */
">="          return GE;
"<="          return LE;
"=="          return EQ;
"!="          return NE;
"||"          return OR;
"&&"          return AND;

  /* Criterias Symbols */
[%][\.A-Za-z_]+                 { yylval.s = strdup(yytext);
                                  return CRITERIA_SYMBOL;
                                }
  /* Symbols */
[A-Za-z_][\.A-Za-z0-9_]*        { yylval.s = strdup(yytext); return SYMBOL; }
\.[\.A-Za-z_][\.A-Za-z0-9_]*    { yylval.s = strdup(yytext); return SYMBOL; }

  /* Single Characters Operators/Keywords */
[-+*/&=:;|!(){}\[\]><]          { return *yytext; }

  /* Anything else is a syntax error. */
.                               { lex_error("Unknown character '%c' (%d).",
                                            *yytext, *yytext);
                                }

%%
// This function
int yywrap(void) {
//  return ll_eof();
return 0;
}

